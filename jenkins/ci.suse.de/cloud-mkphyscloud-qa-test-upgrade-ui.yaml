- job:
    name: cloud-mkphyscloud-qa-test-upgrade-ui
    node: cloud-mkphyscloud-gate-qa
    description: |
      Run upgrade on the selected cloud
      Useful only for cloud that was built by mkcloud.
      This job is making use of mkcloud.config file stored on admin node which contains
      configuration values used from the jenkins cloud scenario

      Mandatory parameter: hw_number

    logrotate:
      numToKeep: 15
      daysToKeep: -1

    wrappers:
      - build-name:
          name: '#${BUILD_NUMBER} - ${scenario_name} - qa$hw_number - upgrade-ui'
      - timestamps
    publishers:
      - mkphyscloud-qa-common-publishers

    concurrent: true

    parameters:
      - string:
          name: hw_number
          description: Mandatory, number of the QA cloud server

      - string:
          name: upgrade_cloudsource
          default: develcloud7
          description: Mandatory, mkcloud cloudsource target name, e.g. develcloud7

      - string:
          name: scenario_name
          description: Optional; scenario name which typically is an integer with a single letter

      - string:
          name: cct_repo_owner
          default: SUSE-Cloud
          description: Optional; scenario name which typically is an integer with a single letter

      - string:
          name: cct_git_url
          default: https://github.com/$cct_repo_owner/cct.git
          description: Optional, cct git repo url

      - string:
          name: cct_checkout_branch
          default: cloud6
          description: Optional, pick git branch to be tested

      - string:
          name: scenario_job_name
          description: Optional; name of the scenario jenkins job that is used to trigger this job

      - string:
          name: scenario_build_number
          description: Optional; scenario build number that triggered this job

      - string:
          name: scenario_build_number
          description: Optional; scenario build number that triggered this job

    builders:
      - shell: |
          #!/bin/bash
          admin=crowbar$hw_number;
          cloud=qa$hw_number;
          result=0

          artifacts_dir=$WORKSPACE/.artifacts
          rm -rf $artifacts_dir
          mkdir -p $artifacts_dir
          touch $artifacts_dir/.ignore

          ssh root@$admin "
            export cloud=$cloud;
            export upgrade_cloudsource=$upgrade_cloudsource
            export cct_ui_tests=true
            export cct_git_url=$cct_git_url
            export cct_checkout_branch=$cct_checkout_branch
          " '
            set -x;
            hostname -f;
            source mkcloud.config;
            source scripts/qa_crowbarsetup.sh;

            [[ -z $upgrade_cloudsource ]] && \
            complain 55 "Variable \$upgrade_cloudsource not defined, upgrade target is missing"

            zypper refresh
            zypper update
            zypper --non-interactive install crowbar-ui

            # from scripts/mkcloud -> crowbarupgrade_5plus
            onadmin_zypper_patch_all
            onadmin_allow_vendor_change_at_nodes

            export cct_tests=feature:ui:upgrade:landing+feature:ui:upgrade:admin:backup
            onadmin_run_cct

            export cloudsource=$upgrade_cloudsource
            onadmin_prepare_cloudupgrade_admin_repos_6_to_7

            export cct_tests=feature:ui:upgrade:admin:repos
            onadmin_run_cct

            # We only check if the upgrade screen is ready but we will do the upgrade via crowbarctl later
            export cct_tests=feature:ui:upgrade:admin:upgrade
            onadmin_run_cct

          ' || result=$?

          scp root@$admin:/root/github.com/$cct_repo_owner/cct/*.png $artifacts_dir

          if [[ $result != 0 ]]; then
              exit $result
          fi

          # Clean up deps installed for cct UI tests
          # and remove SDK-SP1 SDK-SP1-Update repos
          # /usr/local/sbin/cct_deps_cleanup
          cct_deps_cleanup $admin

          # remove cloud6 ptf repo in case it exists
          ssh root@$admin "zypper rr cloud-ptf"

          # Trigger the SLE upgrade from crowbarctl
          # The cct process runs on the admin node we can't use it here reliably
          # We plug it back once the admin node is upgraded and ready to use
          ssh root@$admin "
            export cloud=$cloud;
            export cloudsource=$upgrade_cloudsource
          " '
            set -x;
            hostname -f;
            source mkcloud.config;
            source scripts/qa_crowbarsetup.sh;
            export cloudsource=$upgrade_cloudsource

            # Do the upgrade of the admin node
            onadmin_upgrade_admin_server
          ' || result=$?

          if [[ $result != 0 ]]; then
              exit $result
          fi

          wait_for 400 3 "! nc -w 1 -z $admin 22" "crowbar to go down after upgrade"
          wait_for 150 1 "nc -w 1 -z $admin 22" "admin node to start ssh daemon"

          ssh root@$admin "
            export cloud=$cloud;
            export cloudsource=$upgrade_cloudsource
            export cct_checkout_branch=$cct_checkout_branch
            export cct_ui_tests=true
          " '
            set -x;
            hostname -f;
            source mkcloud.config;
            source scripts/qa_crowbarsetup.sh;
            export cloudsource=$upgrade_cloudsource

            onadmin_check_admin_server_upgraded

            export cct_tests=feature:ui:upgrade:pgsql:create
            onadmin_run_cct

            onadmin_prepare_cloudupgrade_nodes_repos_6_to_7
            export cct_tests=feature:ui:upgrade:nodes:repos
            onadmin_run_cct

            export cct_tests=feature:ui:upgrade:os-services:stop
            onadmin_run_cct

            export cct_tests=feature:ui:upgrade:os-db:backup
            onadmin_run_cct

            export cct_tests=feature:ui:upgrade:nodes:upgrade
            onadmin_run_cct
          '
